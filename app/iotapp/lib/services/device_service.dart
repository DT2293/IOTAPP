import 'package:dio/dio.dart';
import 'package:iotapp/models/device_model.dart';
import 'package:shared_preferences/shared_preferences.dart';



class DeviceService {
  final Dio _dio;

  DeviceService()
      : _dio = Dio(BaseOptions(baseUrl: 'http://dungtc.iothings.vn/api/devices')) {
    _dio.interceptors.add(
      InterceptorsWrapper(
        onRequest: (options, handler) async {
          SharedPreferences prefs = await SharedPreferences.getInstance();
          final token = prefs.getString('token');
          if (token != null) {
            options.headers['Authorization'] = 'Bearer $token';
          }
          handler.next(options);
        },
      ),
    );
  }

  /// Th√™m thi·∫øt b·ªã m·ªõi, tr·∫£ v·ªÅ Device n·∫øu th√†nh c√¥ng
  Future<Device> addDevice(Device device) async {
    try {
      final response = await _dio.post(
        '/',
        data: device.toJson(),
      );

      // Gi·∫£ s·ª≠ backend tr·∫£ v·ªÅ device d∆∞·ªõi key 'device'
      final data = response.data;
      if (data['device'] != null) {
        return Device.fromJson(data['device']);
      } else {
        throw Exception('D·ªØ li·ªáu thi·∫øt b·ªã tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá');
      }
    } on DioException catch (e) {
      final msg = e.response?.data['error'] ?? 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      throw Exception('Th√™m thi·∫øt b·ªã th·∫•t b·∫°i: $msg');
    }
  }



  /// üü¢ L·∫•y th√¥ng tin thi·∫øt b·ªã theo ID
  Future<Map<String, dynamic>?> getDeviceById(String deviceId) async {
    try {
      final encodedDeviceId = Uri.encodeComponent(deviceId.trim());

      final response = await _dio.get('/devices/$encodedDeviceId');

      print("üì° Thi·∫øt b·ªã nh·∫≠n ƒë∆∞·ª£c: ${response.data}");

      if (response.statusCode == 200) {
        return response.data;
      }
    } catch (e) {
      print("‚ùå L·ªói khi l·∫•y th√¥ng tin thi·∫øt b·ªã: $e");
    }
    return null;
  }

  /// üü¢ Th√™m thi·∫øt b·ªã
 

  /// üü¢ C·∫≠p nh·∫≠t thi·∫øt b·ªã
  Future<void> updateDevice(String deviceId, Device device) async {
    try {
      final encodedId = Uri.encodeComponent(deviceId.trim());
      await _dio.put('/devices/$encodedId', data: {
        "deviceName": device.deviceName,
        "location": device.location,
        "active": device.active,
      });
    } on DioException catch (e) {
      final msg = e.response?.data['error'] ?? 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      throw Exception('C·∫≠p nh·∫≠t thi·∫øt b·ªã th·∫•t b·∫°i: $msg');
    }
  }

  /// üü¢ X√≥a thi·∫øt b·ªã
  Future<void> deleteDevice(String deviceId) async {
    try {
      final encodedId = Uri.encodeComponent(deviceId.trim());
      await _dio.delete('/devices/$encodedId');
    } on DioException catch (e) {
      final msg = e.response?.data['error'] ?? 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      throw Exception('X√≥a thi·∫øt b·ªã th·∫•t b·∫°i: $msg');
    }
  }

  /// üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ thi·∫øt b·ªã c·ªßa user
  Future<List<Map<String, dynamic>>> getAllDevices() async {
    try {
      final response = await _dio.get('/devices');
      if (response.statusCode == 200) {
        return List<Map<String, dynamic>>.from(response.data['devices']);
      }
    } catch (e) {
      print("‚ùå L·ªói khi l·∫•y danh s√°ch thi·∫øt b·ªã: $e");
    }
    return [];
  }
}
