const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/user");
const { generateId } = require("../models/configs");
const authMiddleware = require("../middleware/authMiddleware");
const nodemailer = require("nodemailer");
require("dotenv").config();

const router = express.Router({ strict: false });

// ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
router.post("/register", async (req, res) => {
    try {
        let { username, email, password } = req.body;

        email = email.toLowerCase().trim();
        username = username.toLowerCase().trim();

        const existingUser = await User.findOne({ $or: [{ email }, { username }] });
        if (existingUser) {
            return res.status(400).json({
                error: existingUser.email === email ? "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" : "Username ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!"
            });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const userId = await generateId("User");

        if (!userId) return res.status(500).json({ error: "Kh√¥ng th·ªÉ t·∫°o userId!" });

        const newUser = new User({ userId, username, email, password: hashedPassword });
        await newUser.save();

        res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", user: newUser });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "L·ªói khi ƒëƒÉng k√Ω" });
    }
});

//  ƒêƒÉng nh·∫≠p
router.post("/login", async (req, res) => {
    try {
        let { username, email, password } = req.body;
        const query = email ? { email: email.toLowerCase().trim() } : { username: username.toLowerCase().trim() };
        const user = await User.findOne(query);

        if (!user) return res.status(401).json({ error: "Sai email ho·∫∑c m·∫≠t kh·∫©u!" });

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(401).json({ error: "Sai email ho·∫∑c m·∫≠t kh·∫©u!" });

        const token = jwt.sign({ userId: user.userId }, process.env.JWT_SECRET, { expiresIn: "7d" });

        res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", token, user });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "L·ªói khi ƒëƒÉng nh·∫≠p" });
    }
});

// C·∫≠p nh·∫≠t th√¥ng tin user
router.put("/update/:userId", authMiddleware, async (req, res) => {
    try {
        const { username, email } = req.body;
        const userId = Number(req.params.userId); // üîπ Chuy·ªÉn userId v·ªÅ ki·ªÉu s·ªë

        if (userId !== req.user.userId) {
            return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin n√†y!" });
        }

        const user = await User.findOne({ userId });
        if (!user) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });

        if (username) user.username = username;
        if (email) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                return res.status(400).json({ error: "Email kh√¥ng h·ª£p l·ªá!" });
            }
            user.email = email.toLowerCase().trim();
        }

        await user.save();
        res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", user });
    } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t:", error);
        res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin" });
    }
});

//ƒê·ªïi m·∫≠t kh·∫©u
router.put("/updatepassword/:userId", authMiddleware, async (req, res) => {
    try {
        const { oldPassword, newPassword } = req.body;
        const userId = Number(req.params.userId); // üîπ Chuy·ªÉn userId v·ªÅ ki·ªÉu s·ªë n·∫øu c·∫ßn

        if (userId !== req.user.userId) {
            return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªïi m·∫≠t kh·∫©u!" });
        }

        const user = await User.findOne({ userId });
        if (!user) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });

        const isMatch = await bcrypt.compare(oldPassword, user.password);
        if (!isMatch) return res.status(400).json({ error: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!" });

        // üîπ Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u m·ªõi
        if (newPassword.length < 6) {
            return res.status(400).json({ error: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!" });
        }

        user.password = await bcrypt.hash(newPassword, 10);
        await user.save();

        res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
    } catch (error) {
        console.error("L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", error);
        res.status(500).json({ error: "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u" });
    }
});


// üìå L·∫•y th√¥ng tin ng∆∞·ªùi d√πng k√®m thi·∫øt b·ªã (‚úÖ Fix l·ªói populate)
router.get("/users/:userId", authMiddleware, async (req, res) => {
    try {
        const { userId } = req.params;
        const user = await User.findOne({ userId }).populate("devices");

        if (!user) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });

        res.json(user);
    } catch (error) {
        console.error("L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
        res.status(500).json({ error: "L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng" });
    }
});

// üìå L·∫•y th√¥ng tin profile
router.get("/profile", authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId; // üîπ L·∫•y userId t·ª´ token

        // N·∫øu userId l√† ObjectId, c·∫ßn chuy·ªÉn ƒë·ªïi tr∆∞·ªõc khi truy v·∫•n
        const user = await User.findById(userId).select("-password");

        if (!user) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });

        res.json(user);
    } catch (error) {
        console.error("L·ªói l·∫•y th√¥ng tin user:", error);
        res.status(500).json({ error: "L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng" });
    }
});

// üîπ C·∫•u h√¨nh d·ªãch v·ª• g·ª≠i email
const transporter = nodemailer.createTransport({
    service: "gmail",  // Gmail service
    auth: {
        user: process.env.SMTP_USER,  // L·∫•y user t·ª´ .env
        pass: process.env.SMTP_PASS,  // L·∫•y pass t·ª´ .env
    },
});

// üìå API Qu√™n M·∫≠t Kh·∫©u
router.post("/forgot-password", async (req, res) => {
    try {
        const { email } = req.body;
        const user = await User.findOne({ email: email.toLowerCase().trim() });

        if (!user) return res.status(404).json({ error: "Email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω!" });

        // üîπ T·∫°o m·∫≠t kh·∫©u m·ªõi ng·∫´u nhi√™n
        const newPassword = Math.random().toString(36).slice(-8); // M·∫≠t kh·∫©u m·ªõi ng·∫´u nhi√™n
        const hashedPassword = await bcrypt.hash(newPassword, 10);  // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi

        // üîπ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi v√†o database
        user.password = hashedPassword;
        await user.save();

        // üîπ C·∫•u h√¨nh email g·ª≠i ƒëi
        const mailOptions = {
            from: `"${process.env.SMTP_SENDER_NAME}" <${process.env.SMTP_SENDER_EMAIL}>`, // Hi·ªÉn th·ªã t√™n ng∆∞·ªùi g·ª≠i m√† kh√¥ng hi·ªÉn th·ªã email c√° nh√¢n
            to: user.email, // Email ng∆∞·ªùi nh·∫≠n
            subject: "Kh√¥i ph·ª•c m·∫≠t kh·∫©u", // Ti√™u ƒë·ªÅ email
            html: `
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Kh√¥i ph·ª•c m·∫≠t kh·∫©u</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        background-color: #f4f4f4;
                        margin: 0;
                        padding: 0;
                    }
                    .container {
                        width: 100%;
                        max-width: 600px;
                        margin: 20px auto;
                        background-color: #ffffff;
                        padding: 20px;
                        border-radius: 8px;
                        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
                        text-align: center;
                    }
                    h2 {
                        color: #333;
                    }
                    p {
                        font-size: 16px;
                        color: #555;
                        line-height: 1.6;
                    }
                    .password {
                        font-size: 18px;
                        font-weight: bold;
                        color: #d9534f;
                        background: #f8d7da;
                        padding: 10px;
                        border-radius: 5px;
                        display: inline-block;
                        margin: 10px 0;
                    }
                    .footer {
                        margin-top: 20px;
                        font-size: 14px;
                        color: #777;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h2>Kh√¥i ph·ª•c m·∫≠t kh·∫©u th√†nh c√¥ng!</h2>
                    <p>Xin ch√†o,</p>
                    <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa m√¨nh. D∆∞·ªõi ƒë√¢y l√† m·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n:</p>
                    <div class="password">${newPassword}</div>
                    <p>Vui l√≤ng ƒëƒÉng nh·∫≠p v√† ƒë·ªïi m·∫≠t kh·∫©u ngay ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
                </div>
            </body>
            </html>`
        };

        await transporter.sendMail(mailOptions);

        res.json({ message: "M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!" });
    } catch (error) {
        console.error("L·ªói qu√™n m·∫≠t kh·∫©u:", error);
        res.status(500).json({ error: "L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u" });
    }
});
// üìå ƒêƒÉng xu·∫•t
router.post("/logout", (req, res) => {
    res.clearCookie("token", { httpOnly: true, secure: true, sameSite: "None" });
    res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });
});

module.exports = router;
