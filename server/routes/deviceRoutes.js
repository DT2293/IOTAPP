// const express = require("express");
// const router = express.Router();
// const Device = require("../models/Device");
// const User = require("../models/user"); // Import User model
// const authMiddleware = require("../middleware/authMiddleware");

// // üîπ Th√™m thi·∫øt b·ªã m·ªõi
// router.post("/", authMiddleware, async (req, res) => {
//     try {
//         const userId = req.user.userId;
//         const { deviceId, deviceName, location, active } = req.body;

//         // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
//         const user = await User.findOne({ userId });
//         if (!user) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y User" });

//         // Ki·ªÉm tra n·∫øu deviceId b·ªã thi·∫øu
//         if (!deviceId) return res.status(400).json({ error: "deviceId l√† b·∫Øt bu·ªôc" });

//         // T·∫°o m·ªõi thi·∫øt b·ªã
//         const newDevice = new Device({
//             deviceId,   // Truy·ªÅn deviceId t·ª´ request body
//             userId,
//             deviceName,
//             location,
//             active
//         });

//         await newDevice.save();

//         user.devices.push(newDevice.deviceId);
//         await user.save();

//         res.status(201).json({ message: "Thi·∫øt b·ªã ƒë∆∞·ª£c th√™m th√†nh c√¥ng!", device: newDevice });
//     } catch (error) {
//         console.error("L·ªói khi th√™m thi·∫øt b·ªã:", error);
//         res.status(500).json({ error: "L·ªói khi th√™m thi·∫øt b·ªã" });
//     }
// });


// // üîπ L·∫•y th√¥ng tin thi·∫øt b·ªã theo deviceId l√† string
// router.get("/:deviceId", authMiddleware, async (req, res) => {
//     try {
//         const { deviceId } = req.params;

//         // T√¨m theo tr∆∞·ªùng deviceId, kh√¥ng ph·∫£i m·∫∑c ƒë·ªãnh _id c·ªßa MongoDB
//         const device = await Device.findOne({ deviceId }).populate("userId", "username email");

//         if (!device) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã" });

//         res.json(device);
//     } catch (error) {
//         console.error("L·ªói khi l·∫•y thi·∫øt b·ªã:", error);
//         res.status(500).json({ error: "L·ªói m√°y ch·ªß khi l·∫•y thi·∫øt b·ªã" });
//     }
// });


// // üîπ C·∫≠p nh·∫≠t thi·∫øt b·ªã theo deviceId (UUID)
// router.put("/:deviceId", authMiddleware, async (req, res) => {
//     try {
//         const { deviceName, location, active } = req.body;

//        // S·ª≠a truy v·∫•n t√¨m ki·∫øm ƒë√∫ng theo deviceId
// const existingDevice = await Device.findOne({ deviceId: req.params.deviceId });


//         if (!existingDevice) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã" });

//         if (deviceName !== undefined) existingDevice.deviceName = deviceName;
//         if (location !== undefined) existingDevice.location = location;
//         if (active !== undefined) existingDevice.active = Boolean(active);

//         await existingDevice.save();
//         res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", device: existingDevice });
//     } catch (error) {
//         console.error("L·ªói khi c·∫≠p nh·∫≠t thi·∫øt b·ªã:", error);
//         res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t thi·∫øt b·ªã" });
//     }
// });

// // üîπ X√≥a thi·∫øt b·ªã theo deviceId (UUID) v√† userId (UUID)
// router.delete("/:deviceId", authMiddleware, async (req, res) => {
//     try {
//         const userId = req.user.userId;
//         const { deviceId } = req.params;

//         // X√≥a thi·∫øt b·ªã d·ª±a tr√™n userId v√† deviceId (UUID)
//         const deletedDevice = await Device.findOneAndDelete({ deviceId, userId });


//         if (!deletedDevice) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã c·ªßa user n√†y" });

//         // X√≥a deviceId trong danh s√°ch devices c·ªßa User
//         await User.updateOne({ userId }, { $pull: { devices: deviceId } });

//         res.json({ message: "Thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!" });
//     } catch (error) {
//         console.error("L·ªói khi x√≥a thi·∫øt b·ªã:", error);
//         res.status(500).json({ error: "L·ªói khi x√≥a thi·∫øt b·ªã" });
//     }
// });

// // üîπ L·∫•y danh s√°ch t·∫•t c·∫£ thi·∫øt b·ªã c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
// router.get("/", authMiddleware, async (req, res) => {
//     try {
//         const userId = req.user.userId;
//         const devices = await Device.find({ userId });
//         res.json({ devices });
//     } catch (error) {
//         console.error("L·ªói khi l·∫•y danh s√°ch thi·∫øt b·ªã:", error);
//         res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch thi·∫øt b·ªã" });
//     }
// });

// module.exports = router;



const express = require("express");
const router = express.Router();
const Device = require("../models/Device");
const User = require("../models/user");
const { generateId } = require("../models/configs"); // ‚úÖ Th√™m h√†m generateId
const authMiddleware = require("../middleware/authMiddleware");

// üîπ Th√™m thi·∫øt b·ªã m·ªõi
//const { generateId } = require("../models/configs"); 

// Trong route th√™m thi·∫øt b·ªã m·ªõi
router.post("/", authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;
        const { deviceName, location, active } = req.body;

        const user = await User.findOne({ userId });
        if (!user) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y User" });

        // üî• S·ª≠ d·ª•ng counter ri√™ng cho Device
        const deviceId = await generateId("Device");

        const newDevice = new Device({ deviceId, userId, deviceName, location, active });
        await newDevice.save();

        user.devices.push(newDevice.deviceId);
        await user.save();

        res.status(201).json({ message: "Thi·∫øt b·ªã ƒë∆∞·ª£c th√™m th√†nh c√¥ng!", device: newDevice });
    } catch (error) {
        console.error("L·ªói khi th√™m thi·∫øt b·ªã:", error);
        res.status(500).json({ error: "L·ªói khi th√™m thi·∫øt b·ªã" });
    }
});


// üîπ L·∫•y th√¥ng tin thi·∫øt b·ªã theo deviceId
router.get("/:deviceId", authMiddleware, async (req, res) => {
    try {
        const deviceId = Number(req.params.deviceId);
        const device = await Device.findOne({ deviceId });

        if (!device) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã" });

        // T√¨m user theo userId (v√¨ userId trong Device l√† Number)
        const user = await User.findOne({ userId: device.userId }).select("username email");

        res.json({ ...device.toObject(), user });
    } catch (error) {
        console.error("L·ªói khi l·∫•y thi·∫øt b·ªã:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi l·∫•y thi·∫øt b·ªã" });
    }
});

// üîπ C·∫≠p nh·∫≠t thi·∫øt b·ªã theo deviceId
router.put("/:deviceId", authMiddleware, async (req, res) => {
    try {
        const deviceId = Number(req.params.deviceId); // √âp ki·ªÉu
        const { deviceName, location, active } = req.body;

        const existingDevice = await Device.findOne({ deviceId });
        if (!existingDevice) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã" });

        if (deviceName !== undefined) existingDevice.deviceName = deviceName;
        if (location !== undefined) existingDevice.location = location;
        if (active !== undefined) existingDevice.active = Boolean(active);

        await existingDevice.save();
        res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", device: existingDevice });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t thi·∫øt b·ªã:", error);
        res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t thi·∫øt b·ªã" });
    }
});


// üîπ X√≥a thi·∫øt b·ªã theo deviceId
router.delete("/:deviceId", authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;
        const deviceId = Number(req.params.deviceId); // √âp ki·ªÉu

        const deletedDevice = await Device.findOneAndDelete({ deviceId, userId });
        if (!deletedDevice) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã c·ªßa user n√†y" });

        await User.updateOne({ userId }, { $pull: { devices: deviceId } });
        res.json({ message: "Thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!" });
    } catch (error) {
        console.error("L·ªói khi x√≥a thi·∫øt b·ªã:", error);
        res.status(500).json({ error: "L·ªói khi x√≥a thi·∫øt b·ªã" });
    }
});

// üîπ L·∫•y danh s√°ch t·∫•t c·∫£ thi·∫øt b·ªã c·ªßa ng∆∞·ªùi d√πng
router.get("/", authMiddleware, async (req, res) => {
    try {
        const userId = req.user.userId;
        const devices = await Device.find({ userId });
        res.json({ devices });
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch thi·∫øt b·ªã:", error);
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch thi·∫øt b·ªã" });
    }
});

module.exports = router;
